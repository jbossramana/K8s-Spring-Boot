Namespaces
----------

In Kubernetes, namespaces provides a mechanism for isolating groups of resources within a single cluster.
Names of resources need to be unique within a namespace, but not across namespaces. 
Namespace-based scoping is applicable only for namespaced objects (e.g. Deployments, Services, etc) and not for 
cluster-wide objects (e.g. StorageClass, Nodes, PersistentVolumes, etc)


When to Use Multiple Namespaces
-------------------------------

Namespaces are intended for use in environments with many users spread across multiple teams, or projects. 
For clusters with a few to tens of users, you should not need to create or think about namespaces at all. 

Namespaces provide a scope for names. Names of resources need to be unique within a namespace, but not across namespaces.
Namespaces cannot be nested inside one another and each Kubernetes resource can only be in one namespace.

Namespaces are a way to divide cluster resources between multiple users (via resource quota).


Viewing namespaces
------------------

We can list the current namespaces in a cluster using:

> kubectl get namespace
NAME              STATUS   AGE
default           Active   1d
kube-node-lease   Active   1d
kube-public       Active   1d
kube-system       Active   1d
Kubernetes starts with four initial namespaces:

default: The default namespace for objects with no other namespace
kube-system: The namespace for objects created by the Kubernetes system
kube-public: This namespace is created automatically and is readable by all users (including those not authenticated). 
             This namespace is mostly reserved for cluster usage, in case that some resources should be visible and readable publicly 
             throughout the whole cluster. The public aspect of this namespace is only a convention, not a requirement.
kube-node-lease: This namespace holds Lease objects associated with each node. Node leases allow the kubelet to send heartbeats 
             so that the control plane can detect node failure.


To Check the resources in a specific namespace :
kubectl get namespace default


Setting the namespace for a request
------------------------------------

To set the namespace for a current request, use the --namespace flag.

For example:

kubectl run nginx --image=nginx --namespace=<insert-namespace-name-here>
kubectl get pods --namespace=<insert-namespace-name-here>


Setting the namespace preference
--------------------------------

We can permanently save the namespace for all subsequent kubectl commands in that context.

kubectl config set-context --current --namespace=<insert-namespace-name-here>
# Validate it
kubectl config view --minify | grep namespace:      (user findstr in windows)


Not All Objects are in a Namespace
----------------------------------

Most Kubernetes resources (e.g. pods, services, replication controllers, and others) are in some namespaces. However namespace resources 
are not themselves in a namespace. And low-level resources, such as nodes and persistentVolumes, are not in any namespace.

To see which Kubernetes resources are and aren't in a namespace:

# In a namespace
kubectl api-resources --namespaced=true

# Not in a namespace
kubectl api-resources --namespaced=false
